// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvstore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mvstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MVStoreWriteInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreWriteInput> {
} _MVStoreWriteInput_default_instance_;
class MVStoreReadInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreReadInput> {
} _MVStoreReadInput_default_instance_;
class MVStoreReadOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreReadOutput> {
} _MVStoreReadOutput_default_instance_;
class MVStoreAppendInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreAppendInput> {
} _MVStoreAppendInput_default_instance_;
class MVStoreAppendOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreAppendOutput> {
} _MVStoreAppendOutput_default_instance_;
class MVStoreIncrementInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreIncrementInput> {
} _MVStoreIncrementInput_default_instance_;
class MVStoreIncrementOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreIncrementOutput> {
} _MVStoreIncrementOutput_default_instance_;
class MVStoreMicroInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreMicroInput> {
} _MVStoreMicroInput_default_instance_;
class MVStoreMicroOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MVStoreMicroOutput> {
} _MVStoreMicroOutput_default_instance_;

namespace protobuf_mvstore_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreWriteInput, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadInput, key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, exists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreReadOutput, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendInput, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreAppendOutput, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementInput, key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreIncrementOutput, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroInput, writes_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVStoreMicroOutput, success_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(MVStoreWriteInput)},
  { 9, 15, sizeof(MVStoreReadInput)},
  { 16, 23, sizeof(MVStoreReadOutput)},
  { 25, 32, sizeof(MVStoreAppendInput)},
  { 34, 40, sizeof(MVStoreAppendOutput)},
  { 41, 47, sizeof(MVStoreIncrementInput)},
  { 48, 54, sizeof(MVStoreIncrementOutput)},
  { 55, 62, sizeof(MVStoreMicroInput)},
  { 64, 70, sizeof(MVStoreMicroOutput)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreWriteInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreReadInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreReadOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreAppendInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreAppendOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreIncrementInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreIncrementOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreMicroInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVStoreMicroOutput_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mvstore.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _MVStoreWriteInput_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MVStoreReadInput_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MVStoreReadOutput_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MVStoreAppendInput_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MVStoreAppendOutput_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MVStoreIncrementInput_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MVStoreIncrementOutput_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MVStoreMicroInput_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MVStoreMicroOutput_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MVStoreWriteInput_default_instance_.DefaultConstruct();
  _MVStoreReadInput_default_instance_.DefaultConstruct();
  _MVStoreReadOutput_default_instance_.DefaultConstruct();
  _MVStoreAppendInput_default_instance_.DefaultConstruct();
  _MVStoreAppendOutput_default_instance_.DefaultConstruct();
  _MVStoreIncrementInput_default_instance_.DefaultConstruct();
  _MVStoreIncrementOutput_default_instance_.DefaultConstruct();
  _MVStoreMicroInput_default_instance_.DefaultConstruct();
  _MVStoreMicroOutput_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmvstore.proto\"/\n\021MVStoreWriteInput\022\013\n\003"
      "key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\037\n\020MVStoreReadI"
      "nput\022\013\n\003key\030\001 \002(\014\"2\n\021MVStoreReadOutput\022\016"
      "\n\006exists\030\001 \002(\010\022\r\n\005value\030\002 \001(\014\"0\n\022MVStore"
      "AppendInput\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\""
      "&\n\023MVStoreAppendOutput\022\017\n\007success\030\001 \002(\010\""
      "$\n\025MVStoreIncrementInput\022\013\n\003key\030\001 \002(\014\")\n"
      "\026MVStoreIncrementOutput\022\017\n\007success\030\001 \002(\010"
      "\"5\n\021MVStoreMicroInput\022\014\n\004keys\030\001 \003(\014\022\022\n\006w"
      "rites\030\002 \001(\005:\00210\"%\n\022MVStoreMicroOutput\022\017\n"
      "\007success\030\001 \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mvstore.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mvstore_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreWriteInput::kKeyFieldNumber;
const int MVStoreWriteInput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreWriteInput::MVStoreWriteInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreWriteInput)
}
MVStoreWriteInput::MVStoreWriteInput(const MVStoreWriteInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:MVStoreWriteInput)
}

void MVStoreWriteInput::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MVStoreWriteInput::~MVStoreWriteInput() {
  // @@protoc_insertion_point(destructor:MVStoreWriteInput)
  SharedDtor();
}

void MVStoreWriteInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MVStoreWriteInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreWriteInput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreWriteInput& MVStoreWriteInput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreWriteInput* MVStoreWriteInput::New(::google::protobuf::Arena* arena) const {
  MVStoreWriteInput* n = new MVStoreWriteInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreWriteInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreWriteInput)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreWriteInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreWriteInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreWriteInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreWriteInput)
  return false;
#undef DO_
}

void MVStoreWriteInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreWriteInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreWriteInput)
}

::google::protobuf::uint8* MVStoreWriteInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreWriteInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreWriteInput)
  return target;
}

size_t MVStoreWriteInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MVStoreWriteInput)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
size_t MVStoreWriteInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreWriteInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreWriteInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreWriteInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreWriteInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreWriteInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreWriteInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreWriteInput)
    MergeFrom(*source);
  }
}

void MVStoreWriteInput::MergeFrom(const MVStoreWriteInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreWriteInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void MVStoreWriteInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreWriteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreWriteInput::CopyFrom(const MVStoreWriteInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreWriteInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreWriteInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MVStoreWriteInput::Swap(MVStoreWriteInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreWriteInput::InternalSwap(MVStoreWriteInput* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreWriteInput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreWriteInput

// required bytes key = 1;
bool MVStoreWriteInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreWriteInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreWriteInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreWriteInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& MVStoreWriteInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.key)
  return key_.GetNoArena();
}
void MVStoreWriteInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.key)
}
#if LANG_CXX11
void MVStoreWriteInput::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreWriteInput.key)
}
#endif
void MVStoreWriteInput::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.key)
}
void MVStoreWriteInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.key)
}
::std::string* MVStoreWriteInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreWriteInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreWriteInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.key)
}

// required bytes value = 2;
bool MVStoreWriteInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreWriteInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreWriteInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreWriteInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& MVStoreWriteInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreWriteInput.value)
  return value_.GetNoArena();
}
void MVStoreWriteInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreWriteInput.value)
}
#if LANG_CXX11
void MVStoreWriteInput::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreWriteInput.value)
}
#endif
void MVStoreWriteInput::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreWriteInput.value)
}
void MVStoreWriteInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreWriteInput.value)
}
::std::string* MVStoreWriteInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreWriteInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreWriteInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreWriteInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreWriteInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreWriteInput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreReadInput::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreReadInput::MVStoreReadInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreReadInput)
}
MVStoreReadInput::MVStoreReadInput(const MVStoreReadInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:MVStoreReadInput)
}

void MVStoreReadInput::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MVStoreReadInput::~MVStoreReadInput() {
  // @@protoc_insertion_point(destructor:MVStoreReadInput)
  SharedDtor();
}

void MVStoreReadInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MVStoreReadInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreReadInput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreReadInput& MVStoreReadInput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreReadInput* MVStoreReadInput::New(::google::protobuf::Arena* arena) const {
  MVStoreReadInput* n = new MVStoreReadInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreReadInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreReadInput)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreReadInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreReadInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreReadInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreReadInput)
  return false;
#undef DO_
}

void MVStoreReadInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreReadInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreReadInput)
}

::google::protobuf::uint8* MVStoreReadInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreReadInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreReadInput)
  return target;
}

size_t MVStoreReadInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreReadInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreReadInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreReadInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreReadInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreReadInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreReadInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreReadInput)
    MergeFrom(*source);
  }
}

void MVStoreReadInput::MergeFrom(const MVStoreReadInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreReadInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    set_has_key();
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void MVStoreReadInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreReadInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreReadInput::CopyFrom(const MVStoreReadInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreReadInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreReadInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MVStoreReadInput::Swap(MVStoreReadInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreReadInput::InternalSwap(MVStoreReadInput* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreReadInput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreReadInput

// required bytes key = 1;
bool MVStoreReadInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreReadInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreReadInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreReadInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& MVStoreReadInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreReadInput.key)
  return key_.GetNoArena();
}
void MVStoreReadInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadInput.key)
}
#if LANG_CXX11
void MVStoreReadInput::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreReadInput.key)
}
#endif
void MVStoreReadInput::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadInput.key)
}
void MVStoreReadInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadInput.key)
}
::std::string* MVStoreReadInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreReadInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreReadInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreReadInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreReadInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadInput.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreReadOutput::kExistsFieldNumber;
const int MVStoreReadOutput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreReadOutput::MVStoreReadOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreReadOutput)
}
MVStoreReadOutput::MVStoreReadOutput(const MVStoreReadOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  exists_ = from.exists_;
  // @@protoc_insertion_point(copy_constructor:MVStoreReadOutput)
}

void MVStoreReadOutput::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exists_ = false;
}

MVStoreReadOutput::~MVStoreReadOutput() {
  // @@protoc_insertion_point(destructor:MVStoreReadOutput)
  SharedDtor();
}

void MVStoreReadOutput::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MVStoreReadOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreReadOutput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreReadOutput& MVStoreReadOutput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreReadOutput* MVStoreReadOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreReadOutput* n = new MVStoreReadOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreReadOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreReadOutput)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  exists_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreReadOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreReadOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool exists = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_exists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreReadOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreReadOutput)
  return false;
#undef DO_
}

void MVStoreReadOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreReadOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool exists = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exists(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreReadOutput)
}

::google::protobuf::uint8* MVStoreReadOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreReadOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool exists = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exists(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreReadOutput)
  return target;
}

size_t MVStoreReadOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreReadOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool exists = 1;
  if (has_exists()) {
    total_size += 1 + 1;
  }
  // optional bytes value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreReadOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreReadOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreReadOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreReadOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreReadOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreReadOutput)
    MergeFrom(*source);
  }
}

void MVStoreReadOutput::MergeFrom(const MVStoreReadOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreReadOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      exists_ = from.exists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MVStoreReadOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreReadOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreReadOutput::CopyFrom(const MVStoreReadOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreReadOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreReadOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MVStoreReadOutput::Swap(MVStoreReadOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreReadOutput::InternalSwap(MVStoreReadOutput* other) {
  value_.Swap(&other->value_);
  std::swap(exists_, other->exists_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreReadOutput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreReadOutput

// required bool exists = 1;
bool MVStoreReadOutput::has_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreReadOutput::set_has_exists() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreReadOutput::clear_has_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreReadOutput::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
bool MVStoreReadOutput::exists() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.exists)
  return exists_;
}
void MVStoreReadOutput::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.exists)
}

// optional bytes value = 2;
bool MVStoreReadOutput::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreReadOutput::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreReadOutput::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreReadOutput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& MVStoreReadOutput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreReadOutput.value)
  return value_.GetNoArena();
}
void MVStoreReadOutput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreReadOutput.value)
}
#if LANG_CXX11
void MVStoreReadOutput::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreReadOutput.value)
}
#endif
void MVStoreReadOutput::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreReadOutput.value)
}
void MVStoreReadOutput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreReadOutput.value)
}
::std::string* MVStoreReadOutput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreReadOutput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreReadOutput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreReadOutput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreReadOutput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreReadOutput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreAppendInput::kKeyFieldNumber;
const int MVStoreAppendInput::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreAppendInput::MVStoreAppendInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreAppendInput)
}
MVStoreAppendInput::MVStoreAppendInput(const MVStoreAppendInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:MVStoreAppendInput)
}

void MVStoreAppendInput::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MVStoreAppendInput::~MVStoreAppendInput() {
  // @@protoc_insertion_point(destructor:MVStoreAppendInput)
  SharedDtor();
}

void MVStoreAppendInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MVStoreAppendInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreAppendInput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreAppendInput& MVStoreAppendInput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreAppendInput* MVStoreAppendInput::New(::google::protobuf::Arena* arena) const {
  MVStoreAppendInput* n = new MVStoreAppendInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreAppendInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreAppendInput)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreAppendInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreAppendInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreAppendInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreAppendInput)
  return false;
#undef DO_
}

void MVStoreAppendInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreAppendInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreAppendInput)
}

::google::protobuf::uint8* MVStoreAppendInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreAppendInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreAppendInput)
  return target;
}

size_t MVStoreAppendInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MVStoreAppendInput)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
size_t MVStoreAppendInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreAppendInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreAppendInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreAppendInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreAppendInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreAppendInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreAppendInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreAppendInput)
    MergeFrom(*source);
  }
}

void MVStoreAppendInput::MergeFrom(const MVStoreAppendInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreAppendInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void MVStoreAppendInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreAppendInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreAppendInput::CopyFrom(const MVStoreAppendInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreAppendInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreAppendInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MVStoreAppendInput::Swap(MVStoreAppendInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreAppendInput::InternalSwap(MVStoreAppendInput* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreAppendInput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreAppendInput

// required bytes key = 1;
bool MVStoreAppendInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreAppendInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreAppendInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreAppendInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& MVStoreAppendInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.key)
  return key_.GetNoArena();
}
void MVStoreAppendInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.key)
}
#if LANG_CXX11
void MVStoreAppendInput::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreAppendInput.key)
}
#endif
void MVStoreAppendInput::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.key)
}
void MVStoreAppendInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.key)
}
::std::string* MVStoreAppendInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreAppendInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreAppendInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.key)
}

// required bytes value = 2;
bool MVStoreAppendInput::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVStoreAppendInput::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVStoreAppendInput::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVStoreAppendInput::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& MVStoreAppendInput::value() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendInput.value)
  return value_.GetNoArena();
}
void MVStoreAppendInput::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreAppendInput.value)
}
#if LANG_CXX11
void MVStoreAppendInput::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreAppendInput.value)
}
#endif
void MVStoreAppendInput::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreAppendInput.value)
}
void MVStoreAppendInput::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreAppendInput.value)
}
::std::string* MVStoreAppendInput::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:MVStoreAppendInput.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreAppendInput::release_value() {
  // @@protoc_insertion_point(field_release:MVStoreAppendInput.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreAppendInput::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MVStoreAppendInput.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreAppendOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreAppendOutput::MVStoreAppendOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreAppendOutput)
}
MVStoreAppendOutput::MVStoreAppendOutput(const MVStoreAppendOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MVStoreAppendOutput)
}

void MVStoreAppendOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

MVStoreAppendOutput::~MVStoreAppendOutput() {
  // @@protoc_insertion_point(destructor:MVStoreAppendOutput)
  SharedDtor();
}

void MVStoreAppendOutput::SharedDtor() {
}

void MVStoreAppendOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreAppendOutput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreAppendOutput& MVStoreAppendOutput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreAppendOutput* MVStoreAppendOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreAppendOutput* n = new MVStoreAppendOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreAppendOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreAppendOutput)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreAppendOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreAppendOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreAppendOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreAppendOutput)
  return false;
#undef DO_
}

void MVStoreAppendOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreAppendOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreAppendOutput)
}

::google::protobuf::uint8* MVStoreAppendOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreAppendOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreAppendOutput)
  return target;
}

size_t MVStoreAppendOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreAppendOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreAppendOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreAppendOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreAppendOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreAppendOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreAppendOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreAppendOutput)
    MergeFrom(*source);
  }
}

void MVStoreAppendOutput::MergeFrom(const MVStoreAppendOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreAppendOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void MVStoreAppendOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreAppendOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreAppendOutput::CopyFrom(const MVStoreAppendOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreAppendOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreAppendOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MVStoreAppendOutput::Swap(MVStoreAppendOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreAppendOutput::InternalSwap(MVStoreAppendOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreAppendOutput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreAppendOutput

// required bool success = 1;
bool MVStoreAppendOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreAppendOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreAppendOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreAppendOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
bool MVStoreAppendOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreAppendOutput.success)
  return success_;
}
void MVStoreAppendOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreAppendOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreIncrementInput::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreIncrementInput::MVStoreIncrementInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreIncrementInput)
}
MVStoreIncrementInput::MVStoreIncrementInput(const MVStoreIncrementInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:MVStoreIncrementInput)
}

void MVStoreIncrementInput::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MVStoreIncrementInput::~MVStoreIncrementInput() {
  // @@protoc_insertion_point(destructor:MVStoreIncrementInput)
  SharedDtor();
}

void MVStoreIncrementInput::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MVStoreIncrementInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreIncrementInput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreIncrementInput& MVStoreIncrementInput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreIncrementInput* MVStoreIncrementInput::New(::google::protobuf::Arena* arena) const {
  MVStoreIncrementInput* n = new MVStoreIncrementInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreIncrementInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreIncrementInput)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreIncrementInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreIncrementInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreIncrementInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreIncrementInput)
  return false;
#undef DO_
}

void MVStoreIncrementInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreIncrementInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreIncrementInput)
}

::google::protobuf::uint8* MVStoreIncrementInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreIncrementInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreIncrementInput)
  return target;
}

size_t MVStoreIncrementInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreIncrementInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreIncrementInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreIncrementInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreIncrementInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreIncrementInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreIncrementInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreIncrementInput)
    MergeFrom(*source);
  }
}

void MVStoreIncrementInput::MergeFrom(const MVStoreIncrementInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreIncrementInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    set_has_key();
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void MVStoreIncrementInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreIncrementInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreIncrementInput::CopyFrom(const MVStoreIncrementInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreIncrementInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreIncrementInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MVStoreIncrementInput::Swap(MVStoreIncrementInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreIncrementInput::InternalSwap(MVStoreIncrementInput* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreIncrementInput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreIncrementInput

// required bytes key = 1;
bool MVStoreIncrementInput::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreIncrementInput::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreIncrementInput::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreIncrementInput::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& MVStoreIncrementInput::key() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementInput.key)
  return key_.GetNoArena();
}
void MVStoreIncrementInput::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MVStoreIncrementInput.key)
}
#if LANG_CXX11
void MVStoreIncrementInput::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MVStoreIncrementInput.key)
}
#endif
void MVStoreIncrementInput::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MVStoreIncrementInput.key)
}
void MVStoreIncrementInput::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MVStoreIncrementInput.key)
}
::std::string* MVStoreIncrementInput::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:MVStoreIncrementInput.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MVStoreIncrementInput::release_key() {
  // @@protoc_insertion_point(field_release:MVStoreIncrementInput.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MVStoreIncrementInput::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:MVStoreIncrementInput.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreIncrementOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreIncrementOutput::MVStoreIncrementOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreIncrementOutput)
}
MVStoreIncrementOutput::MVStoreIncrementOutput(const MVStoreIncrementOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MVStoreIncrementOutput)
}

void MVStoreIncrementOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

MVStoreIncrementOutput::~MVStoreIncrementOutput() {
  // @@protoc_insertion_point(destructor:MVStoreIncrementOutput)
  SharedDtor();
}

void MVStoreIncrementOutput::SharedDtor() {
}

void MVStoreIncrementOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreIncrementOutput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreIncrementOutput& MVStoreIncrementOutput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreIncrementOutput* MVStoreIncrementOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreIncrementOutput* n = new MVStoreIncrementOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreIncrementOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreIncrementOutput)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreIncrementOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreIncrementOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreIncrementOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreIncrementOutput)
  return false;
#undef DO_
}

void MVStoreIncrementOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreIncrementOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreIncrementOutput)
}

::google::protobuf::uint8* MVStoreIncrementOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreIncrementOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreIncrementOutput)
  return target;
}

size_t MVStoreIncrementOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreIncrementOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreIncrementOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreIncrementOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreIncrementOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreIncrementOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreIncrementOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreIncrementOutput)
    MergeFrom(*source);
  }
}

void MVStoreIncrementOutput::MergeFrom(const MVStoreIncrementOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreIncrementOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void MVStoreIncrementOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreIncrementOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreIncrementOutput::CopyFrom(const MVStoreIncrementOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreIncrementOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreIncrementOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MVStoreIncrementOutput::Swap(MVStoreIncrementOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreIncrementOutput::InternalSwap(MVStoreIncrementOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreIncrementOutput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreIncrementOutput

// required bool success = 1;
bool MVStoreIncrementOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreIncrementOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreIncrementOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreIncrementOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
bool MVStoreIncrementOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreIncrementOutput.success)
  return success_;
}
void MVStoreIncrementOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreIncrementOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreMicroInput::kKeysFieldNumber;
const int MVStoreMicroInput::kWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreMicroInput::MVStoreMicroInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreMicroInput)
}
MVStoreMicroInput::MVStoreMicroInput(const MVStoreMicroInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  writes_ = from.writes_;
  // @@protoc_insertion_point(copy_constructor:MVStoreMicroInput)
}

void MVStoreMicroInput::SharedCtor() {
  _cached_size_ = 0;
  writes_ = 10;
}

MVStoreMicroInput::~MVStoreMicroInput() {
  // @@protoc_insertion_point(destructor:MVStoreMicroInput)
  SharedDtor();
}

void MVStoreMicroInput::SharedDtor() {
}

void MVStoreMicroInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreMicroInput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreMicroInput& MVStoreMicroInput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreMicroInput* MVStoreMicroInput::New(::google::protobuf::Arena* arena) const {
  MVStoreMicroInput* n = new MVStoreMicroInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreMicroInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreMicroInput)
  keys_.Clear();
  writes_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreMicroInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreMicroInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 writes = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_writes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreMicroInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreMicroInput)
  return false;
#undef DO_
}

void MVStoreMicroInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreMicroInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 writes = 2 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->writes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreMicroInput)
}

::google::protobuf::uint8* MVStoreMicroInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreMicroInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 writes = 2 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->writes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreMicroInput)
  return target;
}

size_t MVStoreMicroInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreMicroInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // optional int32 writes = 2 [default = 10];
  if (has_writes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->writes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreMicroInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreMicroInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreMicroInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreMicroInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreMicroInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreMicroInput)
    MergeFrom(*source);
  }
}

void MVStoreMicroInput::MergeFrom(const MVStoreMicroInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreMicroInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_writes()) {
    set_writes(from.writes());
  }
}

void MVStoreMicroInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreMicroInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreMicroInput::CopyFrom(const MVStoreMicroInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreMicroInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreMicroInput::IsInitialized() const {
  return true;
}

void MVStoreMicroInput::Swap(MVStoreMicroInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreMicroInput::InternalSwap(MVStoreMicroInput* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(writes_, other->writes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreMicroInput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreMicroInput

// repeated bytes keys = 1;
int MVStoreMicroInput::keys_size() const {
  return keys_.size();
}
void MVStoreMicroInput::clear_keys() {
  keys_.Clear();
}
const ::std::string& MVStoreMicroInput::keys(int index) const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.keys)
  return keys_.Get(index);
}
::std::string* MVStoreMicroInput::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:MVStoreMicroInput.keys)
  return keys_.Mutable(index);
}
void MVStoreMicroInput::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MVStoreMicroInput::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void MVStoreMicroInput::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MVStoreMicroInput.keys)
}
void MVStoreMicroInput::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MVStoreMicroInput.keys)
}
::std::string* MVStoreMicroInput::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:MVStoreMicroInput.keys)
  return keys_.Add();
}
void MVStoreMicroInput::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MVStoreMicroInput.keys)
}
#if LANG_CXX11
void MVStoreMicroInput::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MVStoreMicroInput.keys)
}
#endif
void MVStoreMicroInput::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MVStoreMicroInput.keys)
}
void MVStoreMicroInput::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MVStoreMicroInput.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MVStoreMicroInput::keys() const {
  // @@protoc_insertion_point(field_list:MVStoreMicroInput.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MVStoreMicroInput::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:MVStoreMicroInput.keys)
  return &keys_;
}

// optional int32 writes = 2 [default = 10];
bool MVStoreMicroInput::has_writes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreMicroInput::set_has_writes() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreMicroInput::clear_has_writes() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreMicroInput::clear_writes() {
  writes_ = 10;
  clear_has_writes();
}
::google::protobuf::int32 MVStoreMicroInput::writes() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroInput.writes)
  return writes_;
}
void MVStoreMicroInput::set_writes(::google::protobuf::int32 value) {
  set_has_writes();
  writes_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroInput.writes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVStoreMicroOutput::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVStoreMicroOutput::MVStoreMicroOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mvstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVStoreMicroOutput)
}
MVStoreMicroOutput::MVStoreMicroOutput(const MVStoreMicroOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:MVStoreMicroOutput)
}

void MVStoreMicroOutput::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

MVStoreMicroOutput::~MVStoreMicroOutput() {
  // @@protoc_insertion_point(destructor:MVStoreMicroOutput)
  SharedDtor();
}

void MVStoreMicroOutput::SharedDtor() {
}

void MVStoreMicroOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVStoreMicroOutput::descriptor() {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVStoreMicroOutput& MVStoreMicroOutput::default_instance() {
  protobuf_mvstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVStoreMicroOutput* MVStoreMicroOutput::New(::google::protobuf::Arena* arena) const {
  MVStoreMicroOutput* n = new MVStoreMicroOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVStoreMicroOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:MVStoreMicroOutput)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVStoreMicroOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVStoreMicroOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVStoreMicroOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVStoreMicroOutput)
  return false;
#undef DO_
}

void MVStoreMicroOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVStoreMicroOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVStoreMicroOutput)
}

::google::protobuf::uint8* MVStoreMicroOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVStoreMicroOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVStoreMicroOutput)
  return target;
}

size_t MVStoreMicroOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MVStoreMicroOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVStoreMicroOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MVStoreMicroOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MVStoreMicroOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVStoreMicroOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MVStoreMicroOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MVStoreMicroOutput)
    MergeFrom(*source);
  }
}

void MVStoreMicroOutput::MergeFrom(const MVStoreMicroOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MVStoreMicroOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void MVStoreMicroOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MVStoreMicroOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVStoreMicroOutput::CopyFrom(const MVStoreMicroOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MVStoreMicroOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVStoreMicroOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MVStoreMicroOutput::Swap(MVStoreMicroOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVStoreMicroOutput::InternalSwap(MVStoreMicroOutput* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVStoreMicroOutput::GetMetadata() const {
  protobuf_mvstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mvstore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVStoreMicroOutput

// required bool success = 1;
bool MVStoreMicroOutput::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVStoreMicroOutput::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MVStoreMicroOutput::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVStoreMicroOutput::clear_success() {
  success_ = false;
  clear_has_success();
}
bool MVStoreMicroOutput::success() const {
  // @@protoc_insertion_point(field_get:MVStoreMicroOutput.success)
  return success_;
}
void MVStoreMicroOutput::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:MVStoreMicroOutput.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
