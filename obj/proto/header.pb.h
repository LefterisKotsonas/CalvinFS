// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_header_2eproto__INCLUDED
#define PROTOBUF_header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scalar.pb.h"
// @@protoc_insertion_point(includes)
class EmptyProto;
class EmptyProtoDefaultTypeInternal;
extern EmptyProtoDefaultTypeInternal _EmptyProto_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class PairSequence;
class PairSequenceDefaultTypeInternal;
extern PairSequenceDefaultTypeInternal _PairSequence_default_instance_;
class Scalar;
class ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class UInt64Pair;
class UInt64PairDefaultTypeInternal;
extern UInt64PairDefaultTypeInternal _UInt64Pair_default_instance_;

namespace protobuf_header_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_header_2eproto

enum Header_Type {
  Header_Type_RPC = 1,
  Header_Type_CALLBACK = 2,
  Header_Type_ACK = 3,
  Header_Type_DATA = 4,
  Header_Type_SYSTEM = 5
};
bool Header_Type_IsValid(int value);
const Header_Type Header_Type_Type_MIN = Header_Type_RPC;
const Header_Type Header_Type_Type_MAX = Header_Type_SYSTEM;
const int Header_Type_Type_ARRAYSIZE = Header_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Type_descriptor();
inline const ::std::string& Header_Type_Name(Header_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Type_descriptor(), value);
}
inline bool Header_Type_Parse(
    const ::std::string& name, Header_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Type>(
    Header_Type_descriptor(), name, value);
}
enum Header_Priority {
  Header_Priority_LOW = 0,
  Header_Priority_HIGH = 1
};
bool Header_Priority_IsValid(int value);
const Header_Priority Header_Priority_Priority_MIN = Header_Priority_LOW;
const Header_Priority Header_Priority_Priority_MAX = Header_Priority_HIGH;
const int Header_Priority_Priority_ARRAYSIZE = Header_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Priority_descriptor();
inline const ::std::string& Header_Priority_Name(Header_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Priority_descriptor(), value);
}
inline bool Header_Priority_Parse(
    const ::std::string& name, Header_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Priority>(
    Header_Priority_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Header_Type Type;
  static const Type RPC =
    Header_Type_RPC;
  static const Type CALLBACK =
    Header_Type_CALLBACK;
  static const Type ACK =
    Header_Type_ACK;
  static const Type DATA =
    Header_Type_DATA;
  static const Type SYSTEM =
    Header_Type_SYSTEM;
  static inline bool Type_IsValid(int value) {
    return Header_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Header_Type_Type_MIN;
  static const Type Type_MAX =
    Header_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Header_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Header_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Header_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Header_Type_Parse(name, value);
  }

  typedef Header_Priority Priority;
  static const Priority LOW =
    Header_Priority_LOW;
  static const Priority HIGH =
    Header_Priority_HIGH;
  static inline bool Priority_IsValid(int value) {
    return Header_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Header_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Header_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Header_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Header_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Header_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Header_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bool misc_bool = 41;
  int misc_bool_size() const;
  void clear_misc_bool();
  static const int kMiscBoolFieldNumber = 41;
  bool misc_bool(int index) const;
  void set_misc_bool(int index, bool value);
  void add_misc_bool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      misc_bool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_misc_bool();

  // repeated uint64 misc_int = 42;
  int misc_int_size() const;
  void clear_misc_int();
  static const int kMiscIntFieldNumber = 42;
  ::google::protobuf::uint64 misc_int(int index) const;
  void set_misc_int(int index, ::google::protobuf::uint64 value);
  void add_misc_int(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      misc_int() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_misc_int();

  // repeated bytes misc_string = 43;
  int misc_string_size() const;
  void clear_misc_string();
  static const int kMiscStringFieldNumber = 43;
  const ::std::string& misc_string(int index) const;
  ::std::string* mutable_misc_string(int index);
  void set_misc_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_misc_string(int index, ::std::string&& value);
  #endif
  void set_misc_string(int index, const char* value);
  void set_misc_string(int index, const void* value, size_t size);
  ::std::string* add_misc_string();
  void add_misc_string(const ::std::string& value);
  #if LANG_CXX11
  void add_misc_string(::std::string&& value);
  #endif
  void add_misc_string(const char* value);
  void add_misc_string(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& misc_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_misc_string();

  // repeated double misc_double = 44;
  int misc_double_size() const;
  void clear_misc_double();
  static const int kMiscDoubleFieldNumber = 44;
  double misc_double(int index) const;
  void set_misc_double(int index, double value);
  void add_misc_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      misc_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_misc_double();

  // repeated .Scalar misc_scalar = 45;
  int misc_scalar_size() const;
  void clear_misc_scalar();
  static const int kMiscScalarFieldNumber = 45;
  const ::Scalar& misc_scalar(int index) const;
  ::Scalar* mutable_misc_scalar(int index);
  ::Scalar* add_misc_scalar();
  ::google::protobuf::RepeatedPtrField< ::Scalar >*
      mutable_misc_scalar();
  const ::google::protobuf::RepeatedPtrField< ::Scalar >&
      misc_scalar() const;

  // optional string app = 11;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 11;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // optional string rpc = 12;
  bool has_rpc() const;
  void clear_rpc();
  static const int kRpcFieldNumber = 12;
  const ::std::string& rpc() const;
  void set_rpc(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc(::std::string&& value);
  #endif
  void set_rpc(const char* value);
  void set_rpc(const char* value, size_t size);
  ::std::string* mutable_rpc();
  ::std::string* release_rpc();
  void set_allocated_rpc(::std::string* rpc);

  // optional string callback_app = 21;
  bool has_callback_app() const;
  void clear_callback_app();
  static const int kCallbackAppFieldNumber = 21;
  const ::std::string& callback_app() const;
  void set_callback_app(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_app(::std::string&& value);
  #endif
  void set_callback_app(const char* value);
  void set_callback_app(const char* value, size_t size);
  ::std::string* mutable_callback_app();
  ::std::string* release_callback_app();
  void set_allocated_callback_app(::std::string* callback_app);

  // optional string callback_rpc = 22;
  bool has_callback_rpc() const;
  void clear_callback_rpc();
  static const int kCallbackRpcFieldNumber = 22;
  const ::std::string& callback_rpc() const;
  void set_callback_rpc(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_rpc(::std::string&& value);
  #endif
  void set_callback_rpc(const char* value);
  void set_callback_rpc(const char* value, size_t size);
  ::std::string* mutable_callback_rpc();
  ::std::string* release_callback_rpc();
  void set_allocated_callback_rpc(::std::string* callback_rpc);

  // optional string data_channel = 32;
  bool has_data_channel() const;
  void clear_data_channel();
  static const int kDataChannelFieldNumber = 32;
  const ::std::string& data_channel() const;
  void set_data_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_data_channel(::std::string&& value);
  #endif
  void set_data_channel(const char* value);
  void set_data_channel(const char* value, size_t size);
  ::std::string* mutable_data_channel();
  ::std::string* release_data_channel();
  void set_allocated_data_channel(::std::string* data_channel);

  // optional string external_host = 51;
  bool has_external_host() const;
  void clear_external_host();
  static const int kExternalHostFieldNumber = 51;
  const ::std::string& external_host() const;
  void set_external_host(const ::std::string& value);
  #if LANG_CXX11
  void set_external_host(::std::string&& value);
  #endif
  void set_external_host(const char* value);
  void set_external_host(const char* value, size_t size);
  ::std::string* mutable_external_host();
  ::std::string* release_external_host();
  void set_allocated_external_host(::std::string* external_host);

  // required uint64 from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  ::google::protobuf::uint64 from() const;
  void set_from(::google::protobuf::uint64 value);

  // required uint64 to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::google::protobuf::uint64 to() const;
  void set_to(::google::protobuf::uint64 value);

  // optional int32 external_port = 52;
  bool has_external_port() const;
  void clear_external_port();
  static const int kExternalPortFieldNumber = 52;
  ::google::protobuf::int32 external_port() const;
  void set_external_port(::google::protobuf::int32 value);

  // optional uint64 ack_counter = 23;
  bool has_ack_counter() const;
  void clear_ack_counter();
  static const int kAckCounterFieldNumber = 23;
  ::google::protobuf::uint64 ack_counter() const;
  void set_ack_counter(::google::protobuf::uint64 value);

  // optional uint64 data_ptr = 31;
  bool has_data_ptr() const;
  void clear_data_ptr();
  static const int kDataPtrFieldNumber = 31;
  ::google::protobuf::uint64 data_ptr() const;
  void set_data_ptr(::google::protobuf::uint64 value);

  // required .Header.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Header_Type type() const;
  void set_type(::Header_Type value);

  // optional .Header.Priority priority = 13 [default = HIGH];
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::Header_Priority priority() const;
  void set_priority(::Header_Priority value);

  // @@protoc_insertion_point(class_scope:Header)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_to();
  void clear_has_to();
  void set_has_type();
  void clear_has_type();
  void set_has_app();
  void clear_has_app();
  void set_has_rpc();
  void clear_has_rpc();
  void set_has_priority();
  void clear_has_priority();
  void set_has_callback_app();
  void clear_has_callback_app();
  void set_has_callback_rpc();
  void clear_has_callback_rpc();
  void set_has_ack_counter();
  void clear_has_ack_counter();
  void set_has_data_ptr();
  void clear_has_data_ptr();
  void set_has_data_channel();
  void clear_has_data_channel();
  void set_has_external_host();
  void clear_has_external_host();
  void set_has_external_port();
  void clear_has_external_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > misc_bool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > misc_int_;
  ::google::protobuf::RepeatedPtrField< ::std::string> misc_string_;
  ::google::protobuf::RepeatedField< double > misc_double_;
  ::google::protobuf::RepeatedPtrField< ::Scalar > misc_scalar_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::google::protobuf::internal::ArenaStringPtr rpc_;
  ::google::protobuf::internal::ArenaStringPtr callback_app_;
  ::google::protobuf::internal::ArenaStringPtr callback_rpc_;
  ::google::protobuf::internal::ArenaStringPtr data_channel_;
  ::google::protobuf::internal::ArenaStringPtr external_host_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 to_;
  ::google::protobuf::int32 external_port_;
  ::google::protobuf::uint64 ack_counter_;
  ::google::protobuf::uint64 data_ptr_;
  int type_;
  int priority_;
  friend struct protobuf_header_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required uint64 from = 1;
inline bool Header::has_from() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::set_has_from() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Header::clear_has_from() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Header::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
  clear_has_from();
}
inline ::google::protobuf::uint64 Header::from() const {
  // @@protoc_insertion_point(field_get:Header.from)
  return from_;
}
inline void Header::set_from(::google::protobuf::uint64 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:Header.from)
}

// required uint64 to = 2;
inline bool Header::has_to() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::set_has_to() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Header::clear_has_to() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Header::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
inline ::google::protobuf::uint64 Header::to() const {
  // @@protoc_insertion_point(field_get:Header.to)
  return to_;
}
inline void Header::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:Header.to)
}

// required .Header.Type type = 3;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Header::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Header_Type Header::type() const {
  // @@protoc_insertion_point(field_get:Header.type)
  return static_cast< ::Header_Type >(type_);
}
inline void Header::set_type(::Header_Type value) {
  assert(::Header_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Header.type)
}

// optional string app = 11;
inline bool Header::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
inline const ::std::string& Header::app() const {
  // @@protoc_insertion_point(field_get:Header.app)
  return app_.GetNoArena();
}
inline void Header::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.app)
}
#if LANG_CXX11
inline void Header::set_app(::std::string&& value) {
  set_has_app();
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.app)
}
#endif
inline void Header::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.app)
}
inline void Header::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.app)
}
inline ::std::string* Header::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:Header.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_app() {
  // @@protoc_insertion_point(field_release:Header.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:Header.app)
}

// optional string rpc = 12;
inline bool Header::has_rpc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_rpc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_rpc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_rpc() {
  rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rpc();
}
inline const ::std::string& Header::rpc() const {
  // @@protoc_insertion_point(field_get:Header.rpc)
  return rpc_.GetNoArena();
}
inline void Header::set_rpc(const ::std::string& value) {
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.rpc)
}
#if LANG_CXX11
inline void Header::set_rpc(::std::string&& value) {
  set_has_rpc();
  rpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.rpc)
}
#endif
inline void Header::set_rpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.rpc)
}
inline void Header::set_rpc(const char* value, size_t size) {
  set_has_rpc();
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.rpc)
}
inline ::std::string* Header::mutable_rpc() {
  set_has_rpc();
  // @@protoc_insertion_point(field_mutable:Header.rpc)
  return rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_rpc() {
  // @@protoc_insertion_point(field_release:Header.rpc)
  clear_has_rpc();
  return rpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_rpc(::std::string* rpc) {
  if (rpc != NULL) {
    set_has_rpc();
  } else {
    clear_has_rpc();
  }
  rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.rpc)
}

// optional .Header.Priority priority = 13 [default = HIGH];
inline bool Header::has_priority() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Header::set_has_priority() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Header::clear_has_priority() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Header::clear_priority() {
  priority_ = 1;
  clear_has_priority();
}
inline ::Header_Priority Header::priority() const {
  // @@protoc_insertion_point(field_get:Header.priority)
  return static_cast< ::Header_Priority >(priority_);
}
inline void Header::set_priority(::Header_Priority value) {
  assert(::Header_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:Header.priority)
}

// optional string callback_app = 21;
inline bool Header::has_callback_app() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_callback_app() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_callback_app() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_callback_app() {
  callback_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_app();
}
inline const ::std::string& Header::callback_app() const {
  // @@protoc_insertion_point(field_get:Header.callback_app)
  return callback_app_.GetNoArena();
}
inline void Header::set_callback_app(const ::std::string& value) {
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_app)
}
#if LANG_CXX11
inline void Header::set_callback_app(::std::string&& value) {
  set_has_callback_app();
  callback_app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.callback_app)
}
#endif
inline void Header::set_callback_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_app)
}
inline void Header::set_callback_app(const char* value, size_t size) {
  set_has_callback_app();
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_app)
}
inline ::std::string* Header::mutable_callback_app() {
  set_has_callback_app();
  // @@protoc_insertion_point(field_mutable:Header.callback_app)
  return callback_app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_callback_app() {
  // @@protoc_insertion_point(field_release:Header.callback_app)
  clear_has_callback_app();
  return callback_app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_callback_app(::std::string* callback_app) {
  if (callback_app != NULL) {
    set_has_callback_app();
  } else {
    clear_has_callback_app();
  }
  callback_app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_app);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_app)
}

// optional string callback_rpc = 22;
inline bool Header::has_callback_rpc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_callback_rpc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_callback_rpc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_callback_rpc() {
  callback_rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callback_rpc();
}
inline const ::std::string& Header::callback_rpc() const {
  // @@protoc_insertion_point(field_get:Header.callback_rpc)
  return callback_rpc_.GetNoArena();
}
inline void Header::set_callback_rpc(const ::std::string& value) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_rpc)
}
#if LANG_CXX11
inline void Header::set_callback_rpc(::std::string&& value) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.callback_rpc)
}
#endif
inline void Header::set_callback_rpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_rpc)
}
inline void Header::set_callback_rpc(const char* value, size_t size) {
  set_has_callback_rpc();
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_rpc)
}
inline ::std::string* Header::mutable_callback_rpc() {
  set_has_callback_rpc();
  // @@protoc_insertion_point(field_mutable:Header.callback_rpc)
  return callback_rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_callback_rpc() {
  // @@protoc_insertion_point(field_release:Header.callback_rpc)
  clear_has_callback_rpc();
  return callback_rpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_callback_rpc(::std::string* callback_rpc) {
  if (callback_rpc != NULL) {
    set_has_callback_rpc();
  } else {
    clear_has_callback_rpc();
  }
  callback_rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_rpc)
}

// optional uint64 ack_counter = 23;
inline bool Header::has_ack_counter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Header::set_has_ack_counter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Header::clear_has_ack_counter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Header::clear_ack_counter() {
  ack_counter_ = GOOGLE_ULONGLONG(0);
  clear_has_ack_counter();
}
inline ::google::protobuf::uint64 Header::ack_counter() const {
  // @@protoc_insertion_point(field_get:Header.ack_counter)
  return ack_counter_;
}
inline void Header::set_ack_counter(::google::protobuf::uint64 value) {
  set_has_ack_counter();
  ack_counter_ = value;
  // @@protoc_insertion_point(field_set:Header.ack_counter)
}

// optional uint64 data_ptr = 31;
inline bool Header::has_data_ptr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Header::set_has_data_ptr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Header::clear_has_data_ptr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Header::clear_data_ptr() {
  data_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_data_ptr();
}
inline ::google::protobuf::uint64 Header::data_ptr() const {
  // @@protoc_insertion_point(field_get:Header.data_ptr)
  return data_ptr_;
}
inline void Header::set_data_ptr(::google::protobuf::uint64 value) {
  set_has_data_ptr();
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:Header.data_ptr)
}

// optional string data_channel = 32;
inline bool Header::has_data_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_data_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_data_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_data_channel() {
  data_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_channel();
}
inline const ::std::string& Header::data_channel() const {
  // @@protoc_insertion_point(field_get:Header.data_channel)
  return data_channel_.GetNoArena();
}
inline void Header::set_data_channel(const ::std::string& value) {
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.data_channel)
}
#if LANG_CXX11
inline void Header::set_data_channel(::std::string&& value) {
  set_has_data_channel();
  data_channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.data_channel)
}
#endif
inline void Header::set_data_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.data_channel)
}
inline void Header::set_data_channel(const char* value, size_t size) {
  set_has_data_channel();
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.data_channel)
}
inline ::std::string* Header::mutable_data_channel() {
  set_has_data_channel();
  // @@protoc_insertion_point(field_mutable:Header.data_channel)
  return data_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_data_channel() {
  // @@protoc_insertion_point(field_release:Header.data_channel)
  clear_has_data_channel();
  return data_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_data_channel(::std::string* data_channel) {
  if (data_channel != NULL) {
    set_has_data_channel();
  } else {
    clear_has_data_channel();
  }
  data_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_channel);
  // @@protoc_insertion_point(field_set_allocated:Header.data_channel)
}

// repeated bool misc_bool = 41;
inline int Header::misc_bool_size() const {
  return misc_bool_.size();
}
inline void Header::clear_misc_bool() {
  misc_bool_.Clear();
}
inline bool Header::misc_bool(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_bool)
  return misc_bool_.Get(index);
}
inline void Header::set_misc_bool(int index, bool value) {
  misc_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_bool)
}
inline void Header::add_misc_bool(bool value) {
  misc_bool_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Header::misc_bool() const {
  // @@protoc_insertion_point(field_list:Header.misc_bool)
  return misc_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Header::mutable_misc_bool() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_bool)
  return &misc_bool_;
}

// repeated uint64 misc_int = 42;
inline int Header::misc_int_size() const {
  return misc_int_.size();
}
inline void Header::clear_misc_int() {
  misc_int_.Clear();
}
inline ::google::protobuf::uint64 Header::misc_int(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_int)
  return misc_int_.Get(index);
}
inline void Header::set_misc_int(int index, ::google::protobuf::uint64 value) {
  misc_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_int)
}
inline void Header::add_misc_int(::google::protobuf::uint64 value) {
  misc_int_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_int)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Header::misc_int() const {
  // @@protoc_insertion_point(field_list:Header.misc_int)
  return misc_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Header::mutable_misc_int() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_int)
  return &misc_int_;
}

// repeated bytes misc_string = 43;
inline int Header::misc_string_size() const {
  return misc_string_.size();
}
inline void Header::clear_misc_string() {
  misc_string_.Clear();
}
inline const ::std::string& Header::misc_string(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_string)
  return misc_string_.Get(index);
}
inline ::std::string* Header::mutable_misc_string(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_string)
  return misc_string_.Mutable(index);
}
inline void Header::set_misc_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.misc_string)
  misc_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header::set_misc_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Header.misc_string)
  misc_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header::set_misc_string(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  misc_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.misc_string)
}
inline void Header::set_misc_string(int index, const void* value, size_t size) {
  misc_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.misc_string)
}
inline ::std::string* Header::add_misc_string() {
  // @@protoc_insertion_point(field_add_mutable:Header.misc_string)
  return misc_string_.Add();
}
inline void Header::add_misc_string(const ::std::string& value) {
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.misc_string)
}
#if LANG_CXX11
inline void Header::add_misc_string(::std::string&& value) {
  misc_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Header.misc_string)
}
#endif
inline void Header::add_misc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.misc_string)
}
inline void Header::add_misc_string(const void* value, size_t size) {
  misc_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.misc_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Header::misc_string() const {
  // @@protoc_insertion_point(field_list:Header.misc_string)
  return misc_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Header::mutable_misc_string() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_string)
  return &misc_string_;
}

// repeated double misc_double = 44;
inline int Header::misc_double_size() const {
  return misc_double_.size();
}
inline void Header::clear_misc_double() {
  misc_double_.Clear();
}
inline double Header::misc_double(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_double)
  return misc_double_.Get(index);
}
inline void Header::set_misc_double(int index, double value) {
  misc_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_double)
}
inline void Header::add_misc_double(double value) {
  misc_double_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_double)
}
inline const ::google::protobuf::RepeatedField< double >&
Header::misc_double() const {
  // @@protoc_insertion_point(field_list:Header.misc_double)
  return misc_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Header::mutable_misc_double() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_double)
  return &misc_double_;
}

// repeated .Scalar misc_scalar = 45;
inline int Header::misc_scalar_size() const {
  return misc_scalar_.size();
}
inline void Header::clear_misc_scalar() {
  misc_scalar_.Clear();
}
inline const ::Scalar& Header::misc_scalar(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_scalar)
  return misc_scalar_.Get(index);
}
inline ::Scalar* Header::mutable_misc_scalar(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_scalar)
  return misc_scalar_.Mutable(index);
}
inline ::Scalar* Header::add_misc_scalar() {
  // @@protoc_insertion_point(field_add:Header.misc_scalar)
  return misc_scalar_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Scalar >*
Header::mutable_misc_scalar() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_scalar)
  return &misc_scalar_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Scalar >&
Header::misc_scalar() const {
  // @@protoc_insertion_point(field_list:Header.misc_scalar)
  return misc_scalar_;
}

// optional string external_host = 51;
inline bool Header::has_external_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_external_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_external_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_external_host() {
  external_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_host();
}
inline const ::std::string& Header::external_host() const {
  // @@protoc_insertion_point(field_get:Header.external_host)
  return external_host_.GetNoArena();
}
inline void Header::set_external_host(const ::std::string& value) {
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.external_host)
}
#if LANG_CXX11
inline void Header::set_external_host(::std::string&& value) {
  set_has_external_host();
  external_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.external_host)
}
#endif
inline void Header::set_external_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.external_host)
}
inline void Header::set_external_host(const char* value, size_t size) {
  set_has_external_host();
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.external_host)
}
inline ::std::string* Header::mutable_external_host() {
  set_has_external_host();
  // @@protoc_insertion_point(field_mutable:Header.external_host)
  return external_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_external_host() {
  // @@protoc_insertion_point(field_release:Header.external_host)
  clear_has_external_host();
  return external_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_external_host(::std::string* external_host) {
  if (external_host != NULL) {
    set_has_external_host();
  } else {
    clear_has_external_host();
  }
  external_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_host);
  // @@protoc_insertion_point(field_set_allocated:Header.external_host)
}

// optional int32 external_port = 52;
inline bool Header::has_external_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Header::set_has_external_port() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Header::clear_has_external_port() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Header::clear_external_port() {
  external_port_ = 0;
  clear_has_external_port();
}
inline ::google::protobuf::int32 Header::external_port() const {
  // @@protoc_insertion_point(field_get:Header.external_port)
  return external_port_;
}
inline void Header::set_external_port(::google::protobuf::int32 value) {
  set_has_external_port();
  external_port_ = value;
  // @@protoc_insertion_point(field_set:Header.external_port)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Header_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Type>() {
  return ::Header_Type_descriptor();
}
template <> struct is_proto_enum< ::Header_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Priority>() {
  return ::Header_Priority_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_header_2eproto__INCLUDED
